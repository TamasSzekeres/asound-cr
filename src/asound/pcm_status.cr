require "./c/pcm"

module ALSA
  include ALSA::C

  # Wrapper for ASound::SndPcmStatusT
  class PcmStatus
    def initialize
      res = ASound.snd_pcm_status_malloc(out @status)
      raise AlsaException.new(res) unless res == 0
    end

    def finalize
      ASound.snd_pcm_status_free(@status)
    end

    def self.sizeof
      ASound.snd_pcm_status_sizeof
    end

    def dup : PcmStatus
      copy = PcmStatus.new
      ASound.snd_pcm_status_copy(copy.to_unsafe, @status)
      copy
    end

    # Get state from a PCM status container.
    def state : PcmState
      PcmState.new ASound.snd_pcm_status_get_state(@status).value
    end

    # Get trigger timestamp from a PCM status container.
    def trigger_tstamp : Timestamp
      ASound.snd_pcm_status_get_trigger_tstamp(@status, out tstamp)
      Timestamp.new tstamp
    end

    # Get trigger hi-res timestamp from a PCM status container.
    def trigger_htstamp : HTimestamp
      ASound.snd_pcm_status_get_trigger_htstamp(@status, out htstamp)
      HTimestamp.new htstamp
    end

    # Get "now" timestamp from a PCM status container.
    def tstamp : Timestamp
      ASound.snd_pcm_status_get_tstamp(@status, out tstamp)
      Timestamp.new tstamp
    end

    # Get "now" hi-res timestamp from a PCM status container.
    def htstamp : HTimestamp
      ASound.snd_pcm_status_get_htstamp(@status, out htstamp)
      HTimestamp.new htstamp
    end

    # Get "now" hi-res audio timestamp from a PCM status container.
    def audio_htstamp : HTimestamp
      ASound.snd_pcm_status_get_audio_htstamp(@status, out htstamp)
      HTimestamp.new htstamp
    end

    # Get "now" hi-res driver timestamp from a PCM status container.
    # Defines when the status was generated by driver, may differ from normal timestamp.
    def driver_htstamp : HTimestampT
      ASound.snd_pcm_status_get_driver_htstamp(@status, out htstamp)
      HTimestamp.new htstamp
    end

    # def snd_pcm_status_get_audio_htstamp_report(obj : SndPcmStatusT, audio_tstamp_report : SndPcmAudioTstampReportT*) : Void
    #   ASound.snd_pcm_status_get_audio_htstamp_report(@status, )
    # end
    #
    # fun snd_pcm_status_set_audio_htstamp_config(obj : SndPcmStatusT, audio_tstamp_config : SndPcmAudioTstampConfigT*) : Void
    # fun snd_pcm_status_get_delay(obj : SndPcmStatusT) : SndPcmSframesT
    # fun snd_pcm_status_get_avail(obj : SndPcmStatusT) : SndPcmUframesT
    # fun snd_pcm_status_get_avail_max(obj : SndPcmStatusT) : SndPcmUframesT
    # fun snd_pcm_status_get_overrange(obj : SndPcmStatusT) : SndPcmUframesT

    # Returns the underlieing structure.
    def status : ASound::SndPcmStatusT
      @status
    end
  end
end

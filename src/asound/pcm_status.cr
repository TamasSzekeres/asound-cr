require "./c/pcm"

module ALSA
  include ALSA::C

  # Wrapper for ASound::SndPcmStatusT
  class PcmStatus
    def initialize
      res = ASound.snd_pcm_status_malloc(out @status)
      raise AlsaException.new(res) unless res == 0
    end

    def finalize
      ASound.snd_pcm_status_free(@status)
    end

    def self.sizeof
      ASound.snd_pcm_status_sizeof
    end

    def dup : PcmStatus
      copy = PcmStatus.new
      ASound.snd_pcm_status_copy(copy.to_unsafe, @status)
      copy
    end

    # Get state from a PCM status container.
    def state : PcmState
      PcmState.new ASound.snd_pcm_status_get_state(@status).value
    end

    # Get trigger timestamp from a PCM status container.
    def trigger_tstamp : Timestamp
      ASound.snd_pcm_status_get_trigger_tstamp(@status, out tstamp)
      Timestamp.new tstamp
    end

    # Get trigger hi-res timestamp from a PCM status container.
    def trigger_htstamp : HTimestamp
      ASound.snd_pcm_status_get_trigger_htstamp(@status, out htstamp)
      HTimestamp.new htstamp
    end

    # Get "now" timestamp from a PCM status container.
    def tstamp : Timestamp
      ASound.snd_pcm_status_get_tstamp(@status, out tstamp)
      Timestamp.new tstamp
    end

    # Get "now" hi-res timestamp from a PCM status container.
    def htstamp : HTimestamp
      ASound.snd_pcm_status_get_htstamp(@status, out htstamp)
      HTimestamp.new htstamp
    end

    # Get "now" hi-res audio timestamp from a PCM status container.
    def audio_htstamp : HTimestamp
      ASound.snd_pcm_status_get_audio_htstamp(@status, out htstamp)
      HTimestamp.new htstamp
    end

    # Get "now" hi-res driver timestamp from a PCM status container.
    # Defines when the status was generated by driver, may differ from normal timestamp.
    def driver_htstamp : HTimestamp
      ASound.snd_pcm_status_get_driver_htstamp(@status, out htstamp)
      HTimestamp.new htstamp
    end

    # Get AudioTstampReport from a PCM status container.
    def audio_htstamp_report : PcmAudioTstampReport
      ASound.snd_pcm_status_get_audio_htstamp_report(@status, out report)
      PcmAudioTstampReport.new report
    end

    # Get AudioTstampConfig from a PCM status container.
    def audio_htstamp_config : PcmAudioTstampConfig
      config = PcmAudioTstampConfig.new
      ASound.snd_pcm_status_set_audio_htstamp_config(@status, out config.config)
      config
    end

    # Get delay from a PCM status container.
    def delay : Int64
      ASound.snd_pcm_status_get_delay(@status)
    end

    # Get number of frames available from a PCM status container.
    def avail : Int64
      ASound.snd_pcm_status_get_avail(@status)
    end

    # Get maximum number of frames available from a PCM status container after last `Pcm::status=` call.
    def avail_max : Int64
      ASound.snd_pcm_status_get_avail_max(@status)
    end

    # Get count of ADC overrange detections since last call.
    def overrange : Int64
      ASound.snd_pcm_status_get_overrange(@status)
    end

    # Returns the underlieing structure.
    def status : ASound::SndPcmStatusT
      @status
    end
  end
end
